import argparse
import multiprocessing as mp
import time
from datetime import datetime
from multiprocessing.managers import BaseManager

import gym
from stable_baselines3.ppo import PPO

import malware_rl
from random_agent import RandomAgent
from rolling_agent import RollingAgent


# define obj manager can create
class AgentContext():
    def __init__(self):
        self.counter = 0
        self.evasions = 0
        self.nproc = 0
        self.lock = mp.Lock()
        self.elock = mp.Lock()
        self.nlock = mp.Lock()

    def set_counter(self, n):
        with self.lock:
            self.counter = n

    def dec_counter(self):
        with self.lock:
            self.counter -= 1

    def get_counter(self):
        with self.lock:
            return self.counter

    def inc_evasions(self):
        with self.elock:
            self.evasions += 1

    def get_evasions(self):
        with self.elock:
            return self.evasions

    def dec_nproc(self):
        with self.nlock:
            self.nproc -= 1

    def inc_nproc(self):
        with self.nlock:
            self.nproc += 1

    def get_nproc(self):
        with self.nlock:
            return self.nproc


class AgentContextManager(BaseManager):
    pass


agent_cls_map = {
    "ppo": PPO,
    "random": RandomAgent,
    "rolling": RollingAgent
}


def __worker(agent_name, agent_kwargs, env_name, env_kwargs, test_args, ctx):
    ctx.inc_nproc()
    env = gym.make(env_name, **env_kwargs)
    agent_cls = agent_cls_map[agent_name]
    if agent_cls == RandomAgent or agent_cls == RollingAgent:
        agent = agent_cls(env)
    else:
        agent = agent_cls.load(
            test_args["model_path"], env=env, **agent_kwargs)
    while True:
        if ctx.get_counter() <= 0:
            break
        ctx.dec_counter()
        ob = env.reset()
        done = False
        while True:
            action, _ = agent.predict(ob)
            ob, reward, done, _ = env.step(action)
            if done and reward >= 10:
                ctx.inc_evasions()
                break
            elif done:
                break
    ctx.dec_nproc()


def server(ip, port, test_args):
    mg = AgentContextManager(address=(ip, port), authkey=b'1205')
    mg.start()  # manager process
    ctx = mg.get_context()
    ctx.set_counter(test_args['episode_count'])
    start_time = datetime.now()
    while ctx.get_counter() > 0:
        time.sleep(3)
        print("finished: {}, elasped time: {}".format(
            test_args["episode_count"] - ctx.get_counter(), datetime.now() - start_time))
    evasion_rate = (ctx.get_evasions() / test_args['episode_count']) * 100
    print(f"{evasion_rate}% samples evaded model.")
    while True:
        if ctx.get_nproc() == 0:
            break
    mg.shutdown()


def client(ip, port, agent_name, agent_kwargs, env_name, env_kwargs, test_kwargs, nproc=1):
    ctx = mp.get_context("spawn")  # spawn an process
    mg = AgentContextManager(address=(ip, port), authkey=b'1205')
    mg.connect()
    agent_ctx = mg.get_context()
    procs = [ctx.Process(target=__worker, args=(agent_name, agent_kwargs, env_name,
                                                env_kwargs, test_kwargs, agent_ctx)) for i in range(nproc)]
    for p in procs:
        p.start()
    for p in procs:
        p.join()


def main():
    parser = argparse.ArgumentParser(add_help=False)
    parser.add_argument("--agent", type=str)
    parser.add_argument("--env", type=str)
    parser.add_argument("--ep", type=int)
    parser.add_argument("-j", type=int)
    parser.add_argument("-s", action='store_true',
                        default=False)  # server mode
    parser.add_argument("-c", action='store_true',
                        default=False)  # client mode
    parser.add_argument("-h", type=str, default="127.0.0.1")
    parser.add_argument("-p", type=int, default=5000)
    args = parser.parse_args()

    test_args = {
        "episode_count": args.ep
    }

    if args.s:
        server(args.h, args.p, test_args)
    if args.c:
        client(args.h, args.p, args.agent, {}, args.env, {}, test_args, args.j)


if __name__ == '__main__':
    ctx = AgentContext()  # define obj manager can manage
    AgentContextManager.register("get_context", callable=lambda: ctx)
    main()
