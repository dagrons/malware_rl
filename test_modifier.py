import glob
import os
import random
import re
import sys
from malware_rl.envs.controls.modifier import modify_sample, ACTION_TABLE
from malware_rl.envs.utils import ember, interface, sorel
import time
from malware_rl.envs.utils import interface, malconv

# 测试每个动作耗时

module_path = os.path.split(os.path.abspath(sys.modules[__name__].__file__))[0]

MODEL_TABLE = {
    "mc": malconv.MalConv,
    "ember": ember.EmberModel,
    "sorel": sorel.SorelModel
}

if __name__ == "__main__":

    sha256list = []
    for fp in glob.glob(os.path.join("/root/malware_rl/data/evaded/malconv", "*")):
        fn = os.path.split(fp)[-1]
        # require filenames to be sha256
        result = re.match(r"^[0-9a-fA-F]{64}$", fn)
        if result:
            sha256list.append(result.group(0))
    choosen_list = random.sample(sha256list, 100)
    # evaluate time interval for action i
    # for k, v in ACTION_TABLE.items():
    #     start = time.time()
    #     for sha256 in choosen_list:
    #         bytez = interface.fetch_file( "/root/malware_rl/data/evaded/malconv/" + sha256)
    #         modify_sample(bytez, v)
    #     end = time.time()
    #     print("{}: {}".format(k, (end-start)))

    for model_name, model_cls in MODEL_TABLE.items():
        model = model_cls()
        start = time.time()
        for sha256 in choosen_list:
            bytez = interface.fetch_file(
                "/root/malware_rl/data/evaded/malconv/" + sha256)
            obs = model.extract(bytez)
            print(model.predict_sample(obs))
        end = time.time()
        print("{}: {}".format(model_name, (end-start)))
