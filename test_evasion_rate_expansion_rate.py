"""
test random bytes injection with different payload size
"""
import argparse
import os
import string
import sys
import random
import pefile

from tqdm import tqdm

from malware_rl.envs.utils.ember import EmberModel
from malware_rl.envs.utils.malconv import MalConv
from malware_rl.envs.utils.sorel import SorelModel

module_path = os.path.split(os.path.abspath(sys.modules[__name__].__file__))[0]

GOOD_STRING_PATH = os.path.join(module_path, "malware_rl/envs/controls/good_strings/xournal-strings.txt")
TRUSTED_PATH = os.path.join(module_path, "malware_rl/envs/controls/trusted/xournalpp-1.0.18-windows.exe")

models = {
    "malconv": MalConv,
    "ember": EmberModel,
    "sorel": SorelModel,
}


def payload_generate(payload_size: int, payload_type: str) -> bytes:
    """
    payload generator
    """
    if payload_type == "rs":  # random string
        with open("random_strings", 'r') as f:
            payload = bytes(f.read(payload_size), encoding="ascii")
    elif payload_type == "rb":  # random bytes
        with open("random_bytes", "rb") as f:
            payload = f.read(payload_size)
    elif payload_type == "bb":  # benign binary
        pe = pefile.PE(TRUSTED_PATH)
        overlay = pe.get_overlay()
        payload = overlay[:payload_size]
    elif payload_type == "bs":  # benign string
        with open(GOOD_STRING_PATH) as f:
            ss = f.read()
            payload = bytes(ss[:payload_size], encoding="ascii")
    return payload


def test(payload_size: int, payload_type: int, model_name: str, ep: int) -> None:
    paths = os.listdir(os.path.join(module_path, "malware_rl/envs/utils/samples"))
    model = models[model_name]()
    current_ep = 0
    evasion_count = 0
    pbar = tqdm(total=ep)
    while current_ep < ep:
        while True:
            path = random.choice(paths)
            full_path = os.path.join(module_path, "malware_rl/envs/utils/samples", path)
            bytez = open(full_path, 'rb').read()
            if model.detect(bytez):
                break
        payload = payload_generate(payload_size, payload_type)
        bytez += payload
        if not model.detect(bytez):
            evasion_count += 1
        current_ep += 1
        pbar.update(1)
    evasion_rate = evasion_count / ep
    print(f"total count:{ep}, evasion count:{evasion_count}, evasion rate: {evasion_rate}")


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-s", type=int, required=True)
    parser.add_argument("-t", type=str, required=True)
    parser.add_argument("-m", type=str, required=True)
    parser.add_argument("-ep", type=int, required=True)
    args = parser.parse_args()
    test(args.s, args.t, args.m, args.ep)


if __name__ == "__main__":
    main()
