import argparse
import os
import sys
import random

import gym
from tqdm import tqdm

from malware_rl.envs.controls import modifier
from malware_rl.envs.utils.ember import EmberModel
from malware_rl.envs.utils.malconv import MalConv
from malware_rl.envs.utils.sorel import SorelModel

module_path = os.path.split(os.path.abspath(sys.modules[__name__].__file__))[0]


def test(ep_count, model_name, action, step):
    model_cls = {
        "ember": EmberModel,
        "sorel": SorelModel,
        "malconv": MalConv,
    }
    model = model_cls[model_name]()
    evasion_count = 0
    current_ep = 0
    pbar = tqdm(total=500)
    paths = os.listdir(os.path.join(module_path, "malware_rl/envs/utils/samples"))
    while current_ep < 500:
        while True:
            path = random.choice(paths)
            full_path = os.path.join(module_path, "malware_rl/envs/utils/samples", path)
            bytez = open(full_path, 'rb').read()
            if model.detect(bytez):
                break
        for i in range(step):
            bytez = modifier.modify_sample(bytez, action)
            if not model.detect(bytez):
                evasion_count += 1
                break
        current_ep += 1
        pbar.update(1)
    print(f"total count:{ep_count}, evasion count:{evasion_count}, evasion-rate:{evasion_count / ep_count}")


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--ep", type=int, required=True)
    parser.add_argument("--model", type=str, required=True)
    parser.add_argument("--action", type=str, required=True)
    parser.add_argument("--step", type=int, required=True)
    args = parser.parse_args()
    test(args.ep, args.model, args.action, args.step)


if __name__ == "__main__":
    main()
