import argparse
import os
from malware_rl.envs.utils import malconv, ember, sorel, interface
import random
from tqdm import tqdm
import sys


model_cls = {
    "MalConv": malconv.MalConv,
    "Ember": ember.EmberModel,
    "Sorel": sorel.SorelModel
}


def test(model_name, model_args, test_args={}):
    # compute acc of model
    sha256list = interface.get_available_sha256()
    model = model_cls[model_name](**model_args)
    count = 0
    for i in tqdm(range(test_args["episode_count"])):
        # sample from sha256list
        ob = interface.fetch_file(os.path.join(
            interface.SAMPLE_PATH, random.choice(sha256list)))
        score = model.predict_sample(model.extract(ob))
        if isinstance(model, malconv.MalConv):
            if score >= model.malicious_threshold:
                count += 1
        elif isinstance(model, ember.EmberModel):
            if score >= model.threshold:
                count += 1
        elif isinstance(model, sorel.SorelModel):
            if score >= model.threshold:
                count += 1
    acc = count / test_args["episode_count"]
    print(f"acc: {acc*100}%.")


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--model-name", type=str,
                        required=True)
    args = parser.parse_args()

    test_args = {
        "episode_count": 10000,
    }

    test(model_name=args.model_name, model_args={}, test_args=test_args)


if __name__ == "__main__":
    main()
