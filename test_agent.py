import argparse
import os

import gym
import numpy as np
from gym import wrappers
from stable_baselines3.common.on_policy_algorithm import OnPolicyAlgorithm
from stable_baselines3.ppo import PPO
from tqdm import tqdm

import malware_rl
from random_agent import RandomAgent
from rolling_agent import RollingAgent


def test(agent_cls: OnPolicyAlgorithm, agent_args, env_name, env_args, test_args):
    # initialize env
    env = gym.make(env_name, **env_args)
    env = wrappers.Monitor(env, directory=test_args['outdir'], force=True)

    # load agent
    if agent_cls == RandomAgent or agent_cls == RollingAgent:
        agent = agent_cls(env)
    else:
        agent = agent_cls.load(test_args["model_path"], env=env, **agent_args)

    evasions = 0
    evasion_history = {}
    for i in tqdm(range(test_args["episode_count"])):
        ob = env.reset()
        sha256 = env.sha256
        while True:
            action, _ = agent.predict(ob)
            ob, reward, done, ep_history = env.step(action)
            if done and reward >= 10:
                evasions += 1
                evasion_history[sha256] = ep_history
                break
            elif done:
                break
    evasion_rate = (evasions / test_args["episode_count"]) * 100
    mean_action_count = np.mean(env.get_episode_lengths())
    print(f"{evasion_rate}% samples evaded model.")
    print(f"Average of {mean_action_count} moves to evade model.")


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--agent", type=str, required=True)
    parser.add_argument("--env", type=str, required=True)
    parser.add_argument("--ep", type=int, default=100)
    parser.add_argument("--path", type=str)
    args = parser.parse_args()
    test_args = {
        "episode_count": args.ep,
        "model_path": args.path,
        "outdir": "data/logs/test_agent"
    }
    agent_cls = {
        "ppo": PPO,
        "random": RandomAgent,
        "rolling": RollingAgent
    }
    test(agent_cls=agent_cls[args.agent], agent_args={},
         env_name=args.env, env_args={}, test_args=test_args)


if __name__ == '__main__':
    main()
